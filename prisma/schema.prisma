// This is your Prisma schema file,
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessTokens {
  id        Int      @id @default(autoincrement()) // Unique ID
  tokenHash String   @unique // Hashed refresh token
  userId    Int      @unique // Foreign key linking to User model
  createdAt DateTime @default(now()) // Timestamp
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // One-to-One relation with User
}

model Users {
  id           Int            @id @default(autoincrement())
  name         String
  username     String         @unique
  email        String         @unique
  password     String
  role         String         @default("user")
  profileImg   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  accessTokens AccessTokens[] // One-to-many relation: a user can have multiple access tokens
  resetTokens  ResetTokens[] // One-to-many relation: a user can have multiple reset tokens
  Reports      Reports[]
}

model ResetTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster lookup
  @@index([token])
}

model VerifyTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Reports {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String? 
  date      DateTime
  severity  String?
  injuries  Boolean? @default(false)
  reported  Boolean  @default(false)
  description String?
  latitude  Float  
  longitude Float
  frontCamera String
  backCamera String
  createdAt DateTime @default(now())
  responded Boolean  @default(false)
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
